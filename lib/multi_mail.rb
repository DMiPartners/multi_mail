require 'cgi'
require 'json'
require 'openssl'

require 'mail'
require 'multimap'

module MultiMail
  # @see http://rdoc.info/gems/fog/Fog/Errors
  class Error < StandardError; end
  class ForgedRequest < MultiMail::Error; end

  # Returns whether a message is an autoresponder.
  #
  # @param [Mail::Message] message a message
  # @return [Boolean] whether a message is an autoresponder
  # @see https://github.com/opennorth/multi_mail/wiki/Detecting-autoresponders
  def self.autoresponse?(message)
    !!(
      {
        'Auto-Submitted'        => {:ne => 'no'},
        'Delivered-To'          => 'Autoresponder',
        'Precedence'            => 'auto_reply',
        'Return-Path'           => nil,
        'X-Autogenerated'       => {}, # vocabulary
        'X-Autoreply'           => 'yes',
        'X-AutoReply-From'      => {}, # email
        'X-Autorespond'         => {}, # subject
        'X-FC-MachineGenerated' => 'true',
        'X-Mail-Autoreply'      => {}, # tag
        'X-POST-MessageClass'   => '9; Autoresponder',
        'X-Precedence'          => 'auto_reply',
      }.find do |name,value|
        if message[name]
          if Hash === value
            value.all? do |operator,v|
              case operator
              when :ne
                message[name].decoded != v
              when :in
                v.include? message[name].decoded
              end
            end
          else
            message[name].decoded == value
          end
        end
      end || message.subject && message.subject[/\AAUTO:|\AAuto[ -]Reply:|\AAutomatic Reply:|out of( the)? office|\AOn vacation message\z/i]
    )
  end
end

require 'multi_mail/service'
require 'multi_mail/receiver'
require 'multi_mail/receiver/base'
require 'multi_mail/sender'
require 'multi_mail/sender/base'
